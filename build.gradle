plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.tw.bootcamp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.7"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-security"
//	implementation 'org.flywaydb:flyway-core'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.3.3.RELEASE'

	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.microsoft.sqlserver:mssql-jdbc'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springdoc:springdoc-openapi-ui:1.5.11'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
}

test {
    systemProperty 'spring.profiles.active', 'test'
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
    }
    jacoco {
        enabled = true
    }
}

apply plugin: 'jacoco'
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.10
            }
        }
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['com.tw.bootcamp.bookshop.BookshopApplication.class'])
        }))
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['com.tw.bootcamp.bookshop.BookshopApplication.class'])
        }))
    }
}

check.dependsOn jacocoTestCoverageVerification
